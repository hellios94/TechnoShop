<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="The Brand is required." xml:space="preserve">
    <value>Марката е задължителна.</value>
  </data>
  <data name="The Category is required." xml:space="preserve">
    <value>Категорията е задължителна.</value>
  </data>
  <data name="The Description is required." xml:space="preserve">
    <value>Описанието е задължително.</value>
  </data>
  <data name="The description must be between 50 and 500 symbols." xml:space="preserve">
    <value>Описанието трябва да е между 50 и 500 символа.</value>
  </data>
  <data name="The Image is Required." xml:space="preserve">
    <value>Снимката е задължителна.</value>
  </data>
  <data name="The model's name is required." xml:space="preserve">
    <value>Името на модела е задължително.</value>
  </data>
  <data name="The name is required." xml:space="preserve">
    <value>Името е задължително.</value>
  </data>
  <data name="The name must be between 5 and 150 symbols." xml:space="preserve">
    <value>Името трябва да е между 5 и 150 символа.</value>
  </data>
  <data name="The Price is Required." xml:space="preserve">
    <value>Цената е задължителна.</value>
  </data>
  <data name="The price must be between 0.1 and 100000 levs." xml:space="preserve">
    <value>Цената трябва да е между 0.1 и 100000 лева</value>
  </data>
  <data name="The Slug is required." xml:space="preserve">
    <value>Краткото име е задължително.</value>
  </data>
  <data name="This is not valid Url." xml:space="preserve">
    <value>Това не е валиден Url.</value>
  </data>
  <data name="The address is required." xml:space="preserve">
    <value>Адресът е задължителен</value>
  </data>
  <data name="The city is required." xml:space="preserve">
    <value>Градът е задължителен</value>
  </data>
  <data name="The country is required." xml:space="preserve">
    <value>Страната е задължителен</value>
  </data>
  <data name="The Email is required." xml:space="preserve">
    <value>Емейлът е задължителен</value>
  </data>
  <data name="The first name is required." xml:space="preserve">
    <value>Собственото име е задължително</value>
  </data>
  <data name="The last name is required." xml:space="preserve">
    <value>Фамилията е задължителна</value>
  </data>
  <data name="The phone number is required." xml:space="preserve">
    <value>Телефонният номер е задължителен</value>
  </data>
  <data name="The postal code is required." xml:space="preserve">
    <value>Пощенският код е задължителен</value>
  </data>
  <data name="This is not valid Email" xml:space="preserve">
    <value>Това не е валиден емейл</value>
  </data>
  <data name="This is not valid phone number." xml:space="preserve">
    <value>Това не е валиден телефонен номер</value>
  </data>
  <data name="This is not valid Postal Code." xml:space="preserve">
    <value>Това не е валиден пощенски код</value>
  </data>
</root>